#################################
# Marlon Junior Barbosa Marques #
# Compiladores - DCC            #
# UFMG / 2016-2                 #
#################################
 
TP4 - Análise Semântica em COOL
===============================


Etapas de Análise Semântica
---------------------------

    Esta seção descreve em alto nível os passos que meu analisador semântico realiza antes de 
"passar a tocha" para o gerador de código. Os passos são:

    1. Inicia constantes da linguagem (Str, Int, No_class, SELF_TYPE, etc);
    2. Registra as classes do programa: o analisador vai iterar sobre todas as classes e anotá-las 
em um mapa, a fim de recuperá-las facilmente depois. Para manter a consistência do programa, esta 
etapa também registra as classes bases de qualquer programa COOL (Object, Str, etc);
    3. Verifica se há ciclos no grafo de heranças e se o método main está propriamente declarado (na 
sua respectiva classe Main);
    4. Monta o ambiente (Environment) de cada classe. Mais informações sobre essa estrutura na 
próxima seção. 
    5. Itera recursivamente sobre os nós da AST, de maneira descendente (começando da classe até as 
expressões), realizando as principais ações da análise semântica, tais como: veríficação de tipos de 
acordo com as regras da linguagem e anotação correta dos tipos para todas as expressões do arquivo fonte.

Vale lembrar que esta implementação procura reportar a maior quantidade de erros semânticos 
possíveis por compilação - abortando a compilação se houver um erro semântico ou mais. Entretanto, não se pode garantir que todos os erros semânticos serão capturados de uma só vez.

Notas sobre a implementação
---------------------------

    A análise semântica se dá através da colaboração de diversas classes que foram criadas para esse 
propósito. As principais classes e abstrações utilizadas foram:

    * ClassTable: estrutura responsável por dar início a analise semântica e agir como entidade 
central da mesma. Optei por implementar isso como um Singleton, o qual é acessível em qualquer parte
do programa. Esta classe é responsável por iniciar as diversas ações semânticas, como verificação
do grafo de heranças, verificação de tipos, etc. Sua interface se encontra no arquivo semant.h e sua 
implementação se encontra no arquivo semant.cc.

    * Environment: estrutura que contém o ambiente atual da análise semântica. Ela é composta por um 
a referência a classe atual, uma referência aos métodos da classe atual, e uma referência a tabela de
símbolos. A definição desta classe se encontra nno arquivo cool-tree.h, linha 32.

    * SymbolTable: esta classe é a mesma que foi fornecida gratuitamente para a realização deste 
TP. Nenhuma modificação foi feita.

    * tree_node (Classes, Expressions, Formals, etc): Trata-se das classes nós da AST, que já foram 
fornecidas gratuitamente para a realização deste TP. Nota-se que tais classes foram incrementadas 
com diversos métodos os quais facilitam o processo de análise semântica (em especial a descida 
recursiva da árvore). Tais métodos estão declarados em cool-tree.h e definidos em semant.cc.

    * PARA O LEITOR DO CÓDIGO: o ponto de entrada da análise semântica é o método semant() da classe 
program_class. Recomendo começar por lá. A definição de tal método se encontra no arquivo semant.cc, 
linha 1018.


Testes
------
 
### Testes positivos (good.cl)
 
     Cobertura das maiorias das expressões da linguagem COOL. Além disso, rodou-se o mycoolc        
(compilador gerado com o meu analisador semântico) nos arquivos do TP1, a saber, stack.cl e atoi.cl. 
Verificou-se que o programa  gerado rodou com sucesso! Vale lembrar que tais arquivo possuem 
complexidade razoável e cobrem um vasto número de funcionalidades da linguagem.
 
### Testes negativos (bad.cl)
 
    Baseando na especificação do TP, procurei adotar uma estratégia de produção de erros, onde a     
principal ferramenta era o símbolo de erro de Bison, colocado em algumas produções específicas.
 
Limitações conhecidas
---------------------
 
     * Cobertura do código escrito pelos testes não é total;
     * Analisador não garante que todos os erros semânticos do arquivo serão listados em uma só 
compilação.	

